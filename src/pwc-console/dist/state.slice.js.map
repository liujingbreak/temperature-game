{"version":3,"sources":["state.slice.ts"],"names":[],"mappings":"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","file":"state.slice.js","sourcesContent":["// tslint:disable no-console\n\nimport { stateFactory } from '@wfh/plink/wfh/dist/store';\nimport { InferActionsType, PayloadAction } from '@wfh/redux-toolkit-observable/dist/redux-toolkit-observable';\nimport _ from 'lodash';\nimport { Observable, merge } from 'rxjs';\nimport {map, distinctUntilChanged, ignoreElements, catchError, scan} from 'rxjs/operators';\n\n/** We have to explicityly export Observable, for exporting getStore() function, otherwise Typescript will report \n * \"This is likely not portable, a type annotation is necessary\" \n * https://github.com/microsoft/TypeScript/issues/30858\n */\nexport { Observable };\n\nexport interface ConsoleState {\n  stateThreshold: StateThreshold[];\n  fluctuating: number;\n  temperature: number;\n  error?: string;\n\n  _computed: {\n    direction: '↑' | '↓' | '';\n    physicalStates?: StateThreshold[];\n    alert: string;\n    /** value is index of stateRanges */\n    stateIdx?: number;\n  };\n}\n\ninterface StateThreshold {\n  rising?: string;\n  descending?: string;\n  baseTemperature: number;\n  isFluctuating: boolean;\n}\n\nconst stateThreshold: StateThreshold[] = [\n  {\n    rising: 'freezing',\n    descending: 'freezing',\n    baseTemperature: Number.NEGATIVE_INFINITY,\n    isFluctuating: false\n  },\n  {\n    rising: 'unfreezing',\n    descending: 'liquidating',\n    baseTemperature: 0,\n    isFluctuating: false\n  },\n  {\n    rising: 'boiling',\n    descending: 'boiling',\n    baseTemperature: 100,\n    isFluctuating: false\n  }\n];\n\nconst initialState: ConsoleState = {\n  stateThreshold,\n  fluctuating: 0.5,\n  temperature: 25,\n  _computed: {\n    // physicalStates: interpolateFluctuating(stateThreshold, ),\n    direction: '',\n    alert: ''\n  }\n};\n\nconst sliceOpt = {\n  name: 'example',\n  initialState,\n  reducers: {\n    inputTemperature(s: ConsoleState, {payload}: PayloadAction<string>) {\n      const temp = parseFloat(payload);\n      if (Number.isNaN(temp)) {\n        s.error = `Invalid temperature number: ${payload}`;\n        return;\n      }\n\n      if (temp > s.temperature) {\n        s._computed.direction = '↑';\n      } else if (temp < s.temperature) {\n        s._computed.direction = '↓';\n      } else {\n        s._computed.direction = '';\n      }\n\n      const physicalStates = s._computed.physicalStates!;\n      let idx = _.sortedIndexBy(physicalStates, {baseTemperature: temp, isFluctuating: false},\n        threshold => threshold.baseTemperature); // idx is from 0 ~ s.physicalStates.length\n\n      if (idx >= physicalStates.length ||\n        physicalStates[idx].baseTemperature !== temp ||\n        !physicalStates[idx].isFluctuating) {\n        idx--;\n      }\n      s._computed.stateIdx = idx;\n      s.temperature = temp;\n    }\n  }\n};\n\nconst consoleSlice = stateFactory.newSlice(sliceOpt);\n\nexport const actionDispatcher: InferActionsType<typeof sliceOpt> = stateFactory.bindActionCreators(consoleSlice);\n\nstateFactory.addEpic<{example: ConsoleState}>((action$, state$) => {\n  return merge(\n    // initial temperature lookup table\n    getStore().pipe(\n      distinctUntilChanged<ConsoleState>((s1, s2) => s1.fluctuating === s2.fluctuating &&\n        s1.stateThreshold === s2.stateThreshold),\n      map(s => {\n        actionDispatcher._change(d => d._computed.physicalStates =\n          interpolateFluctuating(d.stateThreshold, d.fluctuating));\n      })\n    ),\n\n    // watch stateIdx changes, generate alert\n    getStore().pipe(\n      map(s => s._computed.stateIdx),\n      distinctUntilChanged(),\n      scan((prev, curr) => {\n        const ps = getState()._computed.physicalStates;\n        if (curr != null && prev != null && ps) {\n          if (ps[curr].isFluctuating) {\n            console.log(Math.abs(curr - prev));\n            if (Math.abs(curr - prev) > 1) {\n              actionDispatcher._change(s => s._computed.alert = curr > prev ?\n                ps[curr - 1].rising! :\n                ps[curr + 1].descending!);\n            } else {\n              actionDispatcher._change(s => s._computed.alert = '');\n            }\n          } else {\n            actionDispatcher._change(s => s._computed.alert = curr > prev ? ps[curr].rising! : ps[curr].descending!);\n          }\n        }\n        return curr;\n      })\n    )\n  ).pipe(\n    catchError(err => {\n      actionDispatcher._change(s => s.error = err.message);\n      return merge();\n    }),\n    ignoreElements()\n  );\n});\n\nexport function getState() {\n  return stateFactory.sliceState(consoleSlice);\n}\n\nexport function getStore() {\n  return stateFactory.sliceStore(consoleSlice);\n}\n\nfunction interpolateFluctuating(states: StateThreshold[], fluct: number) {\n  const ranges: StateThreshold[] = [\n    states[0]\n  ];\n  for (const item of states.slice(1)) {\n    ranges.push(\n      {\n        isFluctuating: true,\n        baseTemperature: item.baseTemperature - fluct\n      },\n      {\n        ...item,\n        baseTemperature: item.baseTemperature + fluct\n      }\n    );\n  }\n  return ranges;\n}\n"]}